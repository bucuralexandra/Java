package org.example.presentationLayer;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import org.example.businessLayer.DeliveryService;
import org.example.businessLayer.MenuItem;
import org.example.dataLayer.Serializator;

import java.io.File;
import java.io.IOException;
import java.util.HashSet;

public class ControllerAdmin {

    @FXML
    private Button backButton;
    @FXML
    private Button importButton;
    @FXML
    private Button createBaseButton;
    @FXML
    private Button createCompositeButton;
    @FXML
    private Button modifyButton;
    @FXML
    private Button deleteButton;
    @FXML
    private TableView<MenuItem> itemsTable;
    @FXML
    private TableColumn col1;
    @FXML
    private TableColumn col2;
    @FXML
    private TableColumn col3;
    @FXML
    private TableColumn col4;
    @FXML
    private TableColumn col5;
    @FXML
    private TableColumn col6;
    @FXML
    private TableColumn col7;
    @FXML
    private TextField nameText;
    @FXML
    private TextField caloriesText;
    @FXML
    private TextField ratingText;
    @FXML
    private TextField sodiumText;
    @FXML
    private TextField fatText;
    @FXML
    private TextField proteinText;
    @FXML
    private TextField priceText;
    @FXML
    private Label attentionLabel;
    @FXML
    private Label nameLabel;
    @FXML
    private Label caloriesLabel;
    @FXML
    private Label ratingLabel;
    @FXML
    private Label sodiumLabel;
    @FXML
    private Label fatLabel;
    @FXML
    private Label proteinLabel;
    @FXML
    private Label priceLabel;
    @FXML
    private Button modifyFinalButton;
    private MenuItem itemChosen;

    private static final Service service = new ProcessService();
    @FXML
    private Button deleteFinalButton;

    /**
     * method that will be called each time a page is opened
     * sets that table columns and the items at the begining
     */
    @FXML
    public void initialize() {
        col1.setCellValueFactory(new PropertyValueFactory<MenuItem, String>("Title"));
        col2.setCellValueFactory(new PropertyValueFactory<org.example.businessLayer.MenuItem, Double>("Rating"));
        col3.setCellValueFactory(new PropertyValueFactory<org.example.businessLayer.MenuItem, Integer>("Calories"));
        col4.setCellValueFactory(new PropertyValueFactory<org.example.businessLayer.MenuItem, Integer>("Protein"));
        col5.setCellValueFactory(new PropertyValueFactory<org.example.businessLayer.MenuItem, Integer>("Fat"));
        col6.setCellValueFactory(new PropertyValueFactory<org.example.businessLayer.MenuItem, Integer>("Sodium"));
        col7.setCellValueFactory(new PropertyValueFactory<org.example.businessLayer.MenuItem, Integer>("Price"));
        DeliveryService deliveryService = new DeliveryService();
        deliveryService = Serializator.deserialize();
        final ObservableList<MenuItem> data = FXCollections.observableArrayList(deliveryService.getItems());
        itemsTable.setItems(data);
        itemsTable.setVisible(true);
    }

    /**
     * Method that will open another page with all the reports that will be
     * generated by the administrator
     */
    @FXML
    public void openReports() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource("reports.fxml"));
            Parent root1 = loader.load();
            Stage stage = new Stage();
            stage.setScene(new Scene(root1));
            stage.show();
            Stage stageCurrent = (Stage) backButton.getScene().getWindow();
            stageCurrent.close();
        } catch (Exception e) {
            System.out.println("Cannot open reports");
        }
    }

    /**
     * This method deals with opening another page, corresponding to the pressed button
     * it will open another ui and then erase the current page, in order to not have at the end multiple
     * pages of the same type
     */
    @FXML
    public void button_onClicked(ActionEvent actionEvent) {
        System.out.println("GO BACK");
        try {
            FXMLLoader loader = new FXMLLoader(new File("C:\\Users\\Alexandra\\Desktop\\PT2021_30424_Bucur_Alexandra_Assignment_4\\src\\main\\java\\org\\example\\presentationLayer\\firstPage.fxml").toURI().toURL());
            Parent root1 = loader.load();
            Stage stage = new Stage();
            stage.setScene(new Scene(root1));
            stage.show();
            Stage stageCurrent = (Stage) backButton.getScene().getWindow();
            stageCurrent.close();
        } catch (Exception e) {
            System.out.println("Cannot open mainPage");
        }
    }

    /**
     * method that will extract and show the initial products from the .csv file
     * the extraction is done by the deliveryService class
     * the controller only displays on the screen all the data
     */
    @FXML
    public void importProducts_onClicked() {
        deleteFinalButton.setVisible(false);
        modifyFinalButton.setVisible(false);
        DeliveryService deliveryService = new DeliveryService();
        deliveryService = Serializator.deserialize();
        HashSet<MenuItem> itemsSet = deliveryService.importProducts();
        final ObservableList<MenuItem> data = FXCollections.observableArrayList(itemsSet);
        itemsTable.setItems(data);
        itemsTable.setVisible(true);
    }

    /**
     * method that will select a certain menuItem to be modified and the modify it
     * it will also set visible some fields needed for inputing the data
     *
     * @param event
     */
    @FXML
    public void modifyProducts_onClicked(ActionEvent event) {
        DeliveryService deliveryService = new DeliveryService();
        deliveryService = Serializator.deserialize();
        if (event.getSource() == modifyButton) {
            final ObservableList<org.example.businessLayer.MenuItem> data = FXCollections.observableArrayList(deliveryService.getItems());
            itemsTable.setItems(data);
            itemsTable.setVisible(true);
            itemChosen = itemsTable.getSelectionModel().getSelectedItem();
            modifyFinalButton.setVisible(true);
            if (itemChosen != null) {
                itemsTable.setVisible(false);
                nameText.setText(itemChosen.getTitle());
                nameText.setVisible(true);
                nameLabel.setVisible(true);
                ratingText.setText(String.valueOf(itemChosen.getRating()));
                ratingText.setVisible(true);
                ratingLabel.setVisible(true);
                caloriesText.setText(String.valueOf(itemChosen.getCalories()));
                caloriesText.setVisible(true);
                caloriesLabel.setVisible(true);
                proteinText.setText(String.valueOf(itemChosen.getProtein()));
                proteinText.setVisible(true);
                proteinLabel.setVisible(true);
                fatText.setText(String.valueOf(itemChosen.getFat()));
                fatText.setVisible(true);
                fatLabel.setVisible(true);
                sodiumText.setText(String.valueOf(itemChosen.getSodium()));
                sodiumText.setVisible(true);
                sodiumLabel.setVisible(true);
                priceText.setText(String.valueOf(itemChosen.computePrice()));
                priceText.setVisible(true);
                priceLabel.setVisible(true);
            } else {
                errors("Please select an item");
            }
        } else {
            if (checkInput()) {
                hideLabels();
                deliveryService.modifyProduct(itemChosen, nameText.getText(), (float) Double.parseDouble(ratingText.getText()), Integer.parseInt(caloriesText.getText()),
                        Integer.parseInt(proteinText.getText()), Integer.parseInt(sodiumText.getText()), Integer.parseInt(fatText.getText()), Integer.parseInt(priceText.getText()));
                Serializator.serialize(deliveryService);
                modifyFinalButton.setVisible(false);
                final ObservableList<org.example.businessLayer.MenuItem> data = FXCollections.observableArrayList(deliveryService.getItems());
                itemsTable.setItems(data);
                itemsTable.setVisible(true);
            } else {
                errors("Incorrect data");
            }
        }
    }

    /**
     * method that check if the input for modifying a product is correct
     *
     * @return true/false
     */
    private boolean checkInput() {
        boolean ok = true;
        try {
            Integer.parseInt(priceText.getText());
            Double.parseDouble(ratingText.getText());
            Integer.parseInt(caloriesText.getText());
            Integer.parseInt(fatText.getText());
            Integer.parseInt(sodiumText.getText());
            Integer.parseInt(proteinText.getText());
        } catch (NumberFormatException e) {
            ok = false;
        }
        return ok;
    }

    /**
     * method that will open new pages based on the button that was clicked
     * -> will open either a base prod page or a composite one
     * -> where a new product will be created
     *
     * @param e
     */
    @FXML
    public void addProducts_onClicked(ActionEvent e) {
        deleteFinalButton.setVisible(false);
        modifyFinalButton.setVisible(false);
        hideLabels();
        DeliveryService deliveryService = new DeliveryService();
        deliveryService = Serializator.deserialize();
        if (e.getSource() == createBaseButton) {
            try {
                FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource("baseItem.fxml"));
                Parent root1 = loader.load();
                Stage stage = new Stage();
                stage.setScene(new Scene(root1));
                stage.show();
                Stage stageCurrent = (Stage) createBaseButton.getScene().getWindow();
                stageCurrent.close();
            } catch (IOException exception) {
                System.out.println("cannot open");
            }
        } else {
            try {
                FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource("compositeItem.fxml"));
                Parent root1 = loader.load();
                Stage stage = new Stage();
                stage.setScene(new Scene(root1));
                stage.show();
                Stage stageCurrent = (Stage) createCompositeButton.getScene().getWindow();
                stageCurrent.close();
            } catch (IOException exception) {
                System.out.println("cannot open");
            }
        }
    }

    /**
     * method that will delete a product from the table
     * it will get the selected item from the table and the delivery
     * service class will delete the object from the file and
     * the object will also be erased from the table
     *
     * @param e
     */
    @FXML
    public void deleteProducts_onClicked(ActionEvent e) {
        if (e.getSource() == deleteButton) {
            hideLabels();
            DeliveryService deliveryService = new DeliveryService();
            deliveryService = Serializator.deserialize();
            final ObservableList<org.example.businessLayer.MenuItem> data = FXCollections.observableArrayList(deliveryService.getItems());
            itemsTable.setItems(data);
            itemsTable.setVisible(true);
            deleteFinalButton.setVisible(true);

        } else {
            MenuItem itemChosen = itemsTable.getSelectionModel().getSelectedItem();
            if (itemChosen != null) {
                DeliveryService deliveryService = new DeliveryService();
                deliveryService = Serializator.deserialize();
                deliveryService.deleteProduct(itemChosen);
                final ObservableList<org.example.businessLayer.MenuItem> data = FXCollections.observableArrayList(deliveryService.getItems());
                itemsTable.setItems(data);
                itemsTable.setVisible(true);
                Serializator.serialize(deliveryService);
            } else errors("Please select an item");
        }
    }

    /**
     * method that will hide the labels and text boxes from the ui when not needed
     */
    private void hideLabels() {

        nameText.setVisible(false);
        nameLabel.setVisible(false);

        ratingText.setVisible(false);
        ratingLabel.setVisible(false);

        caloriesText.setVisible(false);
        caloriesLabel.setVisible(false);

        proteinText.setVisible(false);
        proteinLabel.setVisible(false);

        fatText.setVisible(false);
        fatLabel.setVisible(false);

        sodiumText.setVisible(false);
        sodiumLabel.setVisible(false);

        priceText.setVisible(false);
        priceLabel.setVisible(false);
    }

    private void errors(String message) {
        attentionLabel.setVisible(true);
        attentionLabel.setText(message);
        if (!service.isRunning())
            service.start();
        // If task completed successfully, go back to normal
        service.setOnSucceeded(ee -> {
            attentionLabel.setVisible(false);
            service.reset();
        });
    }

    /**
     * service class that helps with displaying a message for a period of time
     */
    static class ProcessService extends Service<Void> {
        @Override
        protected Task<Void> createTask() {
            return new Task<>() {
                @Override
                protected Void call() throws Exception {
                    Thread.sleep(2000);
                    return null;
                }
            };
        }
    }

}
